************SOME important points
1. DONT forget to put ; at the end of every statement.

2. Primary keys are always unique to each row.

3. NOT NULL means it cannot be empty

4. Fields are refer as columns

5. Records are refer as rows.

6. SQL requires single quotes around text values (most database systems will also allow double quotes). However, numeric fields should not be enclosed in quotes.

7. Be careful when updating records. If you omit the WHERE clause, ALL records will be updated!

8. Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted!

9. The percent sign (%) represents zero, one, or multiple characters. The underscore sign (_) represents one, single character.

10. The UNION operator is used to combine the result-set of two or more SELECT statements. Every SELECT statement within UNION must have the same number of columns. The columns must also have similar data types. The columns in every SELECT statement must also be in the same order.

11. If some customers or suppliers have the same city, each city will only be listed once, because UNION selects only distinct values. Use UNION ALL to also select duplicate values!

12. Single line comments start with --. Any text between -- and the end of the line will be ignored (will not be executed).

****************Creating database FOR Windows User******
> createdb -U postgres name_of_database;
(query used to create database)


> psql -U postgres name_of_database;
(verifying whether the database has created or not and this query is also used to switched to the created database)

> \l
(this query is used to check the list of all created databases)


> \c 'name_of_database'
(this command is used to connect/switch to the other databases)

>CREATE TABLE table_name (column_1 datatype, column_2 datatype, column_3 datatype);
(this query syntax is used to create table in SQL)


> \dt 
(this query is used to display tables which you have created in you database)


> INSERT INTO table_name (column_1, column_2, column_3) VALUES ('Value_1', 'Value_2', 'Value_3');
> INSERT INTO users (name,age,birthday) VALUES ('john',12,2003-01-09);
(this query is used to enter rows in the table)

> SELECT * FROM table_name;
(this query is used to diplay the data which you have entered into the table)

*************Adding Column
>ALTER TABLE table_name ADD column_name datatype;
(this query is used to add column in your existing table)

>UPDATE table_name SET column_name = some_value WHERE column_name = some_value
>UPDATE table_name SET column_name = some_value WHERE column_name = some_value AND column_name = some_value
>UPDATE table_name SET column_name = some_value WHERE column_name = some_value OR column_name2 = some_value
(query to is used to update or make changes in your existing table)


*************JOIN

>SELECT * FROM table_1 JOIN table_2 ON table1.primary_key = table2.foreign_key;

********DELETE---------
>DELETE FROM table_name WHERE name='sallu' OR name='James';
(query to delete row)

>DROP TABLE table_name;
(query to delete whole table);

********Conditional Selection-----------

>SELECT * FROM table_name WHERE column_name LIKE 'any_value%'
(here % means any value after that)


> SELECT * FROM table_name ORDER BY column_name DESC;
(this will select the data will display as sorted data in descending order)

> SELECT * FROM table_name ORDER BY column_name ASC;


**********FUNCTIONS-----------

>SELECT AVG(column_name) FROM table_name;
>SELECT SUM(column_name) FROM table_name;
>SELECT MIN(column_name) FROM table_name;
>SELECT MAX(column_name) FROM table_name;
>SELECT COUNT(column_name) FROM table_name;


************************W3SCHOOL****************

>SELECT Distinct Column_name FROM Table_name;
(this query will return only unique value means without repitition)


The WHERE clause is used to filter records.
It is used to extract only those records that fulfill a specified condition.

>SELECT column1, column2 FROM table_name WHERE condition;
>SELECT * FROM Customers WHERE Country='Germany';


**********AND
>SELECT * FROM Customers WHERE Country='Germany' AND Country='Germany' AND City='Berlin';

*************NOT

>SELECT * FROM Customers WHERE NOT Country='Germany';

**********OR

>SELECT * FROM Customers WHERE Country='Germany' OR Country='Germany' OR City='Berlin';


***********COMBINE AND OR and NOT-------------

SELECT * FROM Customers WHERE Country='Germany' AND (City='Berlin' OR City='MÃ¼nchen');

**********ORDER BY**********

>SELECT * FROM Customers ORDER BY Country;
SELECT * FROM Customers ORDER BY Country DESC;
>SELECT * FROM Customers ORDER BY Country ASC;

***ORDER BY more than one column
>SELECT * FROM Customers ORDER BY Country ASC, CustomerName DESC;


*************Adding Rows------------
>INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);


***********SELECTING Empty Column--------------
>SELECT column_names FROM table_name WHERE column_name IS NULL;

>SELECT column_names FROM table_name WHERE column_name IS NOT NULL;




***************Updating data in the table--------------

>UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;

************Deleting Data from the tables
> DELETE FROM table_name WHERE condition;


*************SELECTING TOP 
>SELECT * FROM Customers LIMIT anynumber;
>SELECT * FROM Customers LIMIT 3;


***********COUNT
function to return the number of records that have the Price value set to 18.
> SELECT COUNT(*) FROM Products WHERE Price = 18;


*******************Minimum and Maximum values-----------------
>SELECT MIN(Price) AS SmallestPrice FROM Products;
(here AS is called Alias and it will be temporary name of the value which will be returned as minimum value)
>SELECT MAX(Price) AS SmallestPrice FROM Products;


**************Alias

> SELECT CustomerID AS ID, CustomerName AS Customer FROM Customers;

*************JOIN**************
Here are the different types of the JOINs in SQL:

1. (INNER) JOIN: Returns records that have matching values in both tables
2. LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
3. RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
4. FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table.


***************SELECT INTO (for copy tables)
The SELECT INTO statement copies data from one table into a new table.
SELECT *
INTO newtable [IN externaldb]
FROM oldtable
WHERE condition;

************IF ELSE in SQL
The CASE expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.

If there is no ELSE part and no conditions are true, it returns NULL
CASE
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    WHEN conditionN THEN resultN
    ELSE result
END;


CASE
    WHEN Quantity > 30 THEN 'The quantity is greater than 30'
    WHEN Quantity = 30 THEN 'The quantity is 30'
    ELSE 'The quantity is under 30'
END AS QuantityText
FROM OrderDetails;


*********What is a Stored Procedure?
A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.

So if you have an SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it.

You can also pass parameters to a stored procedure, so that the stored procedure can act based on the parameter value(s) that is passed.

Stored Procedure Syntax:

CREATE PROCEDURE procedure_name
AS
sql_statement
GO;	

EXEC procedure_name;	

********************COMMENTS

Multi line comment:

/*SELECT * FROM Customers;
SELECT * FROM Products;
SELECT * FROM Orders;
SELECT * FROM Categories;*/

Single Line Comment

--Happy Comment


*******************DELETE/DROP Table or DATABASE

CREATE DATABASE testDB;

DROP DATABASE testDB;

CREATE TABLE users;

DROP TABLE users;

*****************BACKUP DATABASE***************

>BACKUP DATABASE databasename TO DISK = 'filepath';
>BACKUP DATABASE testDB TO DISK = 'D:\backups\testDB.bak';


>BACKUP DATABASE databasename TO DISK = 'filepath' WITH DIFFERENTIAL;
A differential back up only backs up the parts of the database that have changed since the last full database backup. 

******************DELECTE Column
>ALTER TABLE table_name DROP COLUMN column_name;

*************RENAME TABLE 

>ALTER TABLE table_name RENAME COLUMN old_name to new_name;

***********Changing the DATATYPE

>ALTER TABLE table_name ALTER COLUMN column_name datatype;


*****************SQL Constraints

SQL constraints are used to specify rules for the data in a table.

Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and the data action, the action is aborted.

The following constraints are commonly used in SQL:

NOT NULL - Ensures that a column cannot have a NULL value
UNIQUE - Ensures that all values in a column are different
PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
FOREIGN KEY - Prevents actions that would destroy links between tables
CHECK - Ensures that the values in a column satisfies a specific condition
DEFAULT - Sets a default value for a column if no value is specified
CREATE INDEX - Used to create and retrieve data from the database very quickly


















